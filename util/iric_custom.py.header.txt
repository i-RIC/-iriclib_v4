# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

import numpy as np
from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _iric
else:
    import _iric

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)

def _checkErrorCode(ier):
    if ier == 0: return

    raise Exception('Error code ier={0}'.format(ier))

CG_MODE_READ = 0
CG_MODE_WRITE = 1
CG_MODE_MODIFY = 2

IRIC_MODE_READ = 0
IRIC_MODE_WRITE = 1
IRIC_MODE_MODIFY = 2

IRIC_OPTION_CANCEL = 1
IRIC_OPTION_DIVIDESOLUTIONS = 2
IRIC_OPTION_STDSOLUTION = 3

class IntArrayContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size):
        _iric.IntArrayContainer_swiginit(self, _iric.new_IntArrayContainer(size))
    __swig_destroy__ = _iric.delete_IntArrayContainer

    def size(self):
        return _iric.IntArrayContainer_size(self)

    def value(self, index):
        return _iric.IntArrayContainer_value(self, index)

    def setValue(self, index, v):
        return _iric.IntArrayContainer_setValue(self, index, v)

    def pointer(self):
        return _iric.IntArrayContainer_pointer(self)

    def get(self):
        ret = np.zeros(self.size(), dtype=np.int32)
        for i in range(self.size()):
            ret[i] = self.value(i)
        return ret

    def set(self, vals):
        for i in range(self.size()):
            self.setValue(i, int(vals[i]))

# Register IntArrayContainer in _iric:
_iric.IntArrayContainer_swigregister(IntArrayContainer)

class RealArrayContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size):
        _iric.RealArrayContainer_swiginit(self, _iric.new_RealArrayContainer(size))
    __swig_destroy__ = _iric.delete_RealArrayContainer

    def size(self):
        return _iric.RealArrayContainer_size(self)

    def value(self, index):
        return _iric.RealArrayContainer_value(self, index)

    def setValue(self, index, v):
        return _iric.RealArrayContainer_setValue(self, index, v)

    def pointer(self):
        return _iric.RealArrayContainer_pointer(self)

    def get(self):
        ret = np.zeros(self.size(), dtype=np.float64)
        for i in range(self.size()):
            ret[i] = self.value(i)
        return ret

    def set(self, vals):
        for i in range(self.size()):
            self.setValue(i, float(vals[i]))

# Register RealArrayContainer in _iric:
_iric.RealArrayContainer_swigregister(RealArrayContainer)

def cg_open(name, mode):
    ier, fin = _iric.cg_open(name, mode)
    _checkErrorCode(ier)
    return fin

def cg_close(fin):
    ier = _iric.cg_close(fin)
    _checkErrorCode(ier)

