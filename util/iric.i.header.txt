%module iric
%include "cstring.i"
%include "std_string.i"
%include "typemaps.i"

%{
#include "../iriclib.h"
#include "../iriclib_wrapper.h"
%}

%cstring_bounded_output(char *strvalue, 2048);

class IntArrayContainer
{
public:
	IntArrayContainer(int size);
	~IntArrayContainer();

	int size() const;
	int value(int index) const;
	void setValue(int index, int v);
	int* pointer();

private:
	std::vector<int>* m_value;
};

class RealArrayContainer
{
public:
	RealArrayContainer(int size);
	~RealArrayContainer();

	int size() const;
	double value(int index) const;
	void setValue(int index, double v);
	double* pointer();

private:
	std::vector<double>* m_value;
};

class StringArrayContainer
{
public:
	StringArrayContainer();
	~StringArrayContainer();

	void allocate(int size, int maxlen);
	int size() const;
	int maxlen() const;

	std::string value(int index) const;
	void setValue(int index, const std::string& v);
	char* pointer();

private:
	int m_size;
	int m_maxlen;
	std::vector<char>* m_value;
};

